In Java 10, the var keyword was introduced to allow type inference, meaning that the compiler can automatically infer the type of a variable based on the value assigned to it. 
This feature reduces verbosity in code by removing the need to explicitly specify the type of a variable, while still maintaining the strong typing system Java is known for.

Type Inference:
The type of the variable is determined by the compiler at compile time based on the assigned value.
Local Variables Only: var can only be used for local variables within methods or blocks. It cannot be used for instance variables, method parameters, or return types.
Explicit Initialization: When using var, the variable must be initialized at the point of declaration. The compiler uses the assigned value to determine the type.
No null Assignment: You cannot assign null to a var variable without an initializer because null does not give any information about the type.



public class VarExample {
    public static void main(String[] args) {
        // Using var for type inference
        var name = "Java";  // The type of 'name' is inferred as String
        var age = 25;       // The type of 'age' is inferred as int
        var temperature = 98.6;  // The type of 'temperature' is inferred as double

        // Print values
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Temperature: " + temperature);

        // Demonstrate using var with Collections
        var numbers = new int[]{1, 2, 3, 4, 5};  // The type of 'numbers' is inferred as int[]
        
        // Printing the array
        System.out.print("Numbers: ");
        for (int number : numbers) {
            System.out.print(number + " ");
        }
    }
}


Output:
Name: Java
Age: 25
Temperature: 98.6
Numbers: 1 2 3 4 5
